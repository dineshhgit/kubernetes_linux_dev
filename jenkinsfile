pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="*********"
        AWS_DEFAULT_REGION="us-east-1"
        IMAGE_REPO_NAME="sales-web"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "354123217758.dkr.ecr.us-east-1.amazonaws.com/sales-web"
    }
   
    stages {
        
         stage('Logging into AWS ECR') {
            steps {
                script {
                sh """aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                }
                 
            }
        }
        
//        stage('Cloning Git') {
//            steps {
//                checkout([$class: 'GitSCM', branches: [[name: '*/eks-prod']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'ahconnect', url: 'https://github.com/sean-augusta/ahconnect-web.git']]])     
//            }
//        }
  
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh """docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"""
                sh """docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"""
    // Remove the Docker image from the local repository
                sh """docker rmi ${IMAGE_REPO_NAME}:${IMAGE_TAG}"""
                sh """docker rmi ${REPOSITORY_URI}:${IMAGE_TAG}"""
         }
        }
      }
stage('EKS Deploy') {
    steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-CREDS']]) {
            script {
                sh 'aws eks update-kubeconfig --name EKS-Augusta-Cluster --region us-east-1'
                sh 'kubectl get pods -A'
                sh 'kubectl apply -f sales-deployment.yaml'
//                sh 'kubectl apply -f sales-service.yaml'
//                sh 'kubectl apply -f sales-ingress.yaml'
                sh 'kubectl rollout restart deployment sales-ui -n dev'
                sh 'kubectl rollout status deployment sales-ui -n dev'
            }
        }
    }
  }      
}
}
